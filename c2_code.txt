##### start of Listing 2.1 #####
and  as assert  break  class  continue  def  del  elif  else
except False finally  for  from  global  if  import  in  is
lambda  None nonlocal not  or  pass  raise  return  True  try
with  while  yield
##### end of Listing 2.1 #####

##### start of Listing 2.2 #####
In[1]: (2**2**3+4)/(7*(9-5))
Out[1]: 9.285714285714286
In[2]: (2**2**3+4)//(7*(9-5))
Out[2]: 9
In[3]: (2**2**3+4)%(7*(9-5))
Out[3]: 8
In[4]: (32+4)/(2*(9-5))
Out[4]: 4.5
In[5]: (32+4)//(23-13)
Out[5]: 3
In[6]: (32+4)%(23-13)
Out[6]: 6
In[7]: x=379516400906811930638014896080
In[8]: x**2
Out[8]: 144032698557259999607886110560755362973171476419973199366400
In[9]: y=12055735790331359447442538767
In[10]: 991*y**2
Out[10]: 144032698557259999607886110560755362973171476419973199366399
In[11]: Out[10]-Out[8]
Out[11]: -1
In[12]: x**2-991*y**2-1
Out[12]: 0
In[13]: bin(367), bin(1981)
Out[13]: ('0b101101111', '0b11110111101')
In[14]: bin(367 | 1981), bin(367 & 1981), bin(367 ^1981)
Out[14]: ('0b11111111111', '0b100101101', '0b11011010010')
In[15]: bin(~1981), bin(1981 << 3), bin(1981 >> 3)
Out[15]: ('-0b11110111110', '0b11110111101000', '0b11110111')
##### end of Listing 2.2 #####

##### start of Listing 2.3 #####
In[1]: import sys
In[2]: sys.float_info
Out[2]: sys.float_info(max=1.7976931348623157e+308, max_exp=1024,
        max_10_exp=308, min=2.2250738585072014e-308,
        min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53,
        epsilon=2.220446049250313e-16, radix=2, rounds=1)
##### end of Listing 2.3 #####

##### start of Listing 2.4 #####
In[1]: 10000*(1.03)**5
Out[1]:  11592.740743
In[2]: (327.6-78.65)/(2.3+0.13)**6
Out[2]: 1.2091341548676164
In[3]: 4.5-4.4
Out[3]: 0.09999999999999964
In[4]: import sys; max = sys.float_info.max; max
Out[4]: 1.7976931348623157e+308
In[5]: max*1.00001
Out[5]: inf
In[6]: sys.float_info.min*1e-10
Out[6]: 2.225074e-318
In[7]: 1.234567890987654321e38
Out[7]: 1.2345678909876543e+38
##### end of Listing 2.4 #####

##### start of Listing 2.5 #####
In[1]: x = 3 - 5j
In[2]: y = -(6 - 21j)
In[3]: (x+y)/(x - y**2)*(x**3 + y - 3j)
Out[3]: (-2.7021404738144748-6.422968879823101j)
In[4]: x.real
Out[4]: 3.0
In[5]: x.imag
Out[5]: -5.0
In[6]: x.conjugate()
Out[6]: (3+5j)
##### end of Listing 2.5 #####

##### start of Listing 2.6 #####
In[1]: x = -15.6
In[2]: y = int(x); y
Out[2]: -15
In[3]: type(y)
Out[3]: int
In[4]: x=float(y); x
Out[4]: -15.0
In[5]: type(x)
Out[5]: float
In[6]: z = complex(abs(x),(2 - y)); z
Out[6]: (15+17j)
In[7]: abs(z)
Out[7]: 22.671568097509265
In[8]: pow(z, 1.28)
Out[8]: (25.35612170271214+48.0468434395756j)
In[9]: pow(1.28, z)
Out[9]: (-20.006681963602528-35.28791909603722j)
In[10]: round(4.5-4.4, 10)
Out[10]: 0.1
##### end of Listing 2.6 #####

##### start of Listing 2.7 #####
In[1]: import math; a=2; b=6; c=1
In[2]: r1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a); r1
Out[2]: -0.17712434446770464
In[3]: r2 = (-b - math.sqrt(b**2 - 4*a*c))/(2*a); r2
Out[3]: -2.8228756555322954
In[4]: a=2; b=6; c=8
In[5]: r1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a); r1
ValueError: math domain error
In[6]: import cmath
In[7]: r1 = (-b + cmath.sqrt(b**2 - 4*a*c))/(2*a); r1
Out[7]: (-1.5+1.3228756555322954j)
In[8]: r2 = (-b - cmath.sqrt(b**2 - 4*a*c))/(2*a); r2
Out[8]: (-1.5-1.3228756555322954j)
In[9]: math.ceil(-5.3), math.floor(-5.3)
Out[9]: (-5, -6)
In[10]: math.factorial(10)
Out[10]: 3628800
In[11]: math.sqrt(3)
Out[11]: 1.7320508075688772
In[12]: math.exp(2)
Out[12]: 7.38905609893065
In[13]: math.log(7.38905609893065)
Out[13]: 2.0
In[14]: math.log(7.38905609893065, math.e)
Out[14]: 2.0
In[15]: math.log2(65536)
Out[15]: 16.0
In[16]: math.log10(1e-19)
Out[16]: -19.0
In[17]: math.sin(math.pi/3)
Out[17]: 0.8660254037844386
##### end of Listing 2.7 #####

##### start of Listing 2.8 #####
In[1]: year = 1900
In[2]: (year % 4 == 0 and year % 100 != 0) or year % 400 == 0
Out[2]: False
In[3]: year = 2020
In[4]: (year % 4 == 0 and year % 100 != 0) or year % 400 == 0
Out[4]: True
In[5]: year = 2022
In[6]: (year % 4 == 0 and year % 100 != 0) or year % 400 == 0
Out[6]: False
##### end of Listing 2.8 #####

##### start of Listing 2.9 #####
In[1]: a=[1,3,5,7,9]; b=[2,4,6,8,10]
In[2]: c=a+b; c
Out[2]: [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]
In[3]: c.sort(); c
Out[3]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
In[4]: d=[a,b]; d
Out[4]: [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]
In[5]: c[2:10:3]
Out[5]: [3, 6, 9]
In[6]: c[-1:-9:-4]
Out[6]: [10, 6]
In[7]: d[0][4]
Out[7]: 9
In[8]: d[1][0:5:2]=d[0][2:5]; d
Out[8]: [[1, 3, 5, 7, 9], [5, 4, 7, 8, 9]]
In[9]: b
Out[9]: [5, 4, 7, 8, 9]
In[10]: b.clear(); b
Out[10]: []
In[11]: f = (); (type(f), id(f))
Out[11]: (tuple, 8912936)
In[12]: f = (3,); (f, id(f))
Out[12]: ((3,), 182697528)
In[13]: f += (4, 5); (f, id(f))
Out[13]: ((3, 4, 5), 187247080)
In[14]: f[2] = 6
TypeError: 'tuple' object does not support item assignment
In[15]: s=[2,3,5,7,11]; t=[13,17]
In[16]: 5 in s, 6 not in s
Out[16]: (True, True)
In[17]: s+t
Out[17]: [2, 3, 5, 7, 11, 13, 17]
In[18]: s*3
Out[18]: [2, 3, 5, 7, 11, 2, 3, 5, 7, 11, 2, 3, 5, 7, 11]
In[19]: s[1:4]
Out[19]: [3, 5, 7]
In[20]: s[1:]
Out[20]: [3, 5, 7, 11]
In[21]: s[:3]
Out[21]: [2, 3, 5]
In[22]: s[1:4:2]
Out[22]: [3, 7]
In[23]: len(s)
Out[23]: 5
In[24]: min(s), max(s)
Out[24]: (2, 11)
In[25]: s.index(7)
Out[25]: 3
In[26]: s.index(7,1)
Out[26]: 3
In[27]: s.index(7,1,4)
Out[27]: 3
In[28]: s.count(8)
Out[28]: 0
In[29]: s=[2,7,5,3,11]; t=[13,21,17]
In[30]: s[3] = 8; s
Out[30]: [2, 7, 5, 8, 11]
In[31]: s=[2,7,5,3,11]; s[1:4] = t; s
Out[31]: [2, 13, 21, 17, 11]
In[32]: s=[2,7,5,3,11]; del s[2:4]; s
Out[32]: [2, 7, 11]
In[23]: s=[2,7,5,3,11]; s[0:5:2] = t; s
Out[33]: [13, 7, 21, 3, 17]
In[34]: s=[2,7,5,3,11]; del s[0:5:2]; s
Out[34]: [7, 3]
In[35]: s=[2,7,5,3,11]; s.clear(); s
Out[35]: []
In[36]: s=[2,7,5,3,11]; s.copy()
Out[36]: [2, 7, 5, 3, 11]
In[37]: s=[2,7,5,3,11]; s.extend(t); s
Out[37]: [2, 7, 5, 3, 11, 13, 21, 17]
In[38]: s=[2,7,5,3,11]; s+=t; s
Out[38]: [2, 7, 5, 3, 11, 13, 21, 17]
In[39]: s=[2,7,5,3,11]; s*=3; s
Out[39]: [2, 7, 5, 3, 11, 2, 7, 5, 3, 11, 2, 7, 5, 3, 11]
In[40]: s=[2,7,5,3,11]; s.insert(2, 19); s
Out[40]: [2, 7, 19, 5, 3, 11]
In[41]: s=[2,7,5,3,11]; (s.pop(2),s)
Out[41]: (5, [2, 7, 3, 11])
In[42]: s=[2,7,5,3,11]; (s.remove(11), s)
Out[42]: (None, [2, 7, 5, 3])
In[43]: s=[2,7,5,3,11]; s.reverse(); s
Out[43]: [11, 3, 5, 7, 2]
In[44]: s=[2,7,5,3,11]; s.sort(); s
Out[44]: [2, 3, 5, 7, 11]
In[45]: s=[2,7,5,3,11]; s.sort(reverse=True); s
Out[45]: [11, 7, 5, 3, 2]
##### end of Listing 2.9 #####

##### start of Listing 2.10 #####
In[1]: a = 'allows embedded "double" quotes'; a
Out[1]: 'allows embedded "double" quotes'
In[2]: b = "allows embedded 'single' quotes"; b
Out[2]: "allows embedded 'single' quotes"
In[3]: c = """a=[1,3,5,7,9]; b=[2,4,6,8,10]
  ...: c=a+b
  ...: c.sort(); c"""
In[4]: c
Out[4]: 'a=[1,3,5,7,9]; b=[2,4,6,8,10]\nc=a+b\nc.sort(); c'
In[5]: d = [a.startswith('allow'), a.startswith('allou')]; d
Out[5]: [True, False]
In[6]: e = [a.startswith('embee', 7), a.endswith('quo', 3, -3)]; e
Out[6]: [False, True]
In[7]: f = [a.find('em', 3, 6), a.find('em', 7)]; f
Out[7]: [-1, 7]
In[8]: g = '  hello?!!'
In[9]: h = [g.lstrip(), g.rstrip('!?'), g.strip(' !')]; h
Out[9]: ['hello?!!', '  hello', 'hello?']
In[10]: a.replace('e', 'x', 1)
Out[10]: 'allows xmbedded "double" quotes'
In[11]: a.replace('e', 'yy', 3)
Out[11]: 'allows yymbyyddyyd "double" quotes'
In[12]: a.split('e')
Out[12]: ['allows ', 'mb', 'dd', 'd "doubl', '" quot', 's']
In[13]: s='abc123abc';t='bc';u='BC'
In[14]: s.lstrip(t)
Out[14]: 'abc123abc'
In[15]: s.rstrip(t)
Out[15]: 'abc123a'
In[16]: s.replace(t, u)
Out[16]: 'aBC123aBC'
In[17]: s.replace(t, u, 1)
Out[17]: 'aBC123abc'
In[18]: s.split(t)
Out[18]: ['a', '123a', '']
In[19]: t.join(['a', '123a', ''])
Out[19]: 'abc123abc'
In[20]: s='abc123abc';t='bc'
In[21]: s.startswith(t)
Out[21]: False
In[22]: s.startswith(t, 7)
Out[22]: True
In[23]: s.startswith(t, 7, 9)
Out[23]: True
In[24]: s.endswith(t)
Out[24]: True
In[25]: s.endswith(t, 4)
Out[25]: True
In[26]: s.endswith(t, 4, 8)
Out[26]: False
In[27]: s.find(t)
Out[27]: 1
In[28]: s.find(t, 2)
Out[28]: 7
In[29]: s.find(t, 2, 8)
Out[29]: -1
In[30]: str.isalpha(s)
Out[30]: False
In[31]: str.isdecimal(s)
Out[31]: False
In[32]: str.isalnum(s)
Out[32]: True
In[33]: str.islower(s)
Out[33]: True
##### end of Listing 2.10 #####

##### start of Listing 2.11 #####
In[1]: "%-16.8f" % 345.678987654321012
Out[1]: '345.67898765    '
In[2]: "%16.8g" % 3.45678987654321012e34
Out[2]: '   3.4567899e+34'
In[3]: "%16X %-16d" % (345678987654, 987654321012)
Out[3]: '      507C12C186 987654321012    '
##### end of Listing 2.11 #####

##### start of Listing 2.12 #####
In[1]: l = [2,3,5,3,9,2,7,8,6,3]; (l, type(l))
Out[1]: ([2, 3, 5, 3, 9, 2, 7, 8, 6, 3], list)
In[2]: s = set(l); (s, type(s))
Out[2]: ({2, 3, 5, 6, 7, 8, 9}, set)
In[3]: t = set([11, 2, 7, 3, 5, 13])
In[4]: s.union(t)
Out[4]: {2, 3, 5, 6, 7, 8, 9, 11, 13}
In[5]: s.intersection(t)
Out[5]: {2, 3, 5, 7}
In[6]: s.difference(t)
Out[6]: {6, 8, 9}
In[7]: s.isdisjoint(t)
Out[7]: False
In[8]: t.issubset(s)
Out[8]: False
In[9]: s.add(11); s
Out[9]: {2, 3, 5, 6, 7, 8, 9, 11}
In[10]: t.remove(13); t
Out[10]: {2, 3, 5, 7, 11}
In[11]: s>t
Out[11]: True
In[12]: 6 in t, 7 in t
Out[12]: (False, True)
In[13]: t.clear(); t
Out[13]: set()
##### end of Listing 2.12 #####

##### start of Listing 2.13 #####
In[1]: contacts={"Tom":12345, "Jerry":54321, "Mary":23415}
In[2]: contacts
Out[2]: {'Tom': 12345, 'Jerry': 54321, 'Mary': 23415}
In[3]: contacts["Jerry"]=54123; contacts
Out[3]: {'Tom': 12345, 'Jerry': 54123, 'Mary': 23415}
In[4]: contacts["Betty"]=35421; contacts
Out[4]: {'Tom': 12345, 'Jerry': 54123, 'Mary': 23415, 'Betty': 35421}
In[5]: contacts.keys()
Out[5]: dict_keys(['Tom', 'Jerry', 'Mary', 'Betty'])
In[6]: ['Tommy' in contacts, 'Betty' in contacts]
Out[6]: [False, True]
In[7]: (contacts.pop('Jerry'), contacts)
Out[7]: (54123, {'Tom': 12345, 'Mary': 23415, 'Betty': 35421})
In[8]: (contacts.pop('Tommy', None), contacts)
Out[8]: (None, {'Tom': 12345, 'Mary': 23415, 'Betty': 35421})
In[9]: contacts.get('Mary')
Out[9]: 23415
In[10]: len(contacts)
Out[10]: 3
In[11]: contacts.clear(); contacts
Out[11]: {}
##### end of Listing 2.13 #####

##### start of Listing 2.14 #####
In[1]: d1 = {'u':8, 'v':6, 'w':4, 'x':2}; d2 = {'x':1, 'y':3, 'z':5}
In[2]: d1.update(d2); d1
Out[2]: {'u': 8, 'v': 6, 'w': 4, 'x': 1, 'y': 3, 'z': 5}
In[3]: d1 = {'u':8, 'v':6, 'w':4, 'x':2}; d2 = {'x':1, 'y':3, 'z':5}
In[4]: d1 | d2
Out[4]: {'u': 8, 'v': 6, 'w': 4, 'x': 1, 'y': 3, 'z': 5}
In[5]: d2 | d1
Out[5]: {'x': 2, 'y': 3, 'z': 5, 'u': 8, 'v': 6, 'w': 4}
In[6]: d1
Out[6]:  {'u': 8, 'v': 6, 'w': 4, 'x': 2}
In[7]: d2
Out[7]:  {'x': 1, 'y': 3, 'z': 5}
##### end of Listing 2.14 #####